; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=mina32 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=M32I

%struct.Foo = type { i32, i32, i32, i16, i8 }
@foo = global %struct.Foo { i32 1, i32 2, i32 3, i16 4, i8 5 }, align 4

define i32 @callee(%struct.Foo* byval %f) nounwind {
; M32I-LABEL: callee:
; M32I:       ; %bb.0: ; %entry
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    ld r0, [r0, 0]
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
entry:
  %0 = getelementptr inbounds %struct.Foo, %struct.Foo* %f, i32 0, i32 0
  %1 = load i32, i32* %0, align 4
  ret i32 %1
}

define void @caller() nounwind {
; M32I-LABEL: caller:
; M32I:       ; %bb.0: ; %entry
; M32I-NEXT:    addi sp, sp, -20
; M32I-NEXT:    st r14, [sp, 16]
; M32I-NEXT:    addi r14, sp, 20
; M32I-NEXT:    movu r0, %hi(foo+12)
; M32I-NEXT:    movl r0, %lo(foo+12)
; M32I-NEXT:    ld r1, [r0, 0]
; M32I-NEXT:    addi r0, r14, -20
; M32I-NEXT:    st r1, [r0, 12]
; M32I-NEXT:    movu r1, %hi(foo+8)
; M32I-NEXT:    movl r1, %lo(foo+8)
; M32I-NEXT:    ld r1, [r1, 0]
; M32I-NEXT:    st r1, [r0, 8]
; M32I-NEXT:    movu r1, %hi(foo+4)
; M32I-NEXT:    movl r1, %lo(foo+4)
; M32I-NEXT:    ld r1, [r1, 0]
; M32I-NEXT:    st r1, [r0, 4]
; M32I-NEXT:    movu r1, %hi(foo)
; M32I-NEXT:    movl r1, %lo(foo)
; M32I-NEXT:    ld r1, [r1, 0]
; M32I-NEXT:    st r1, [r14, -20]
; M32I-NEXT:    movu r1, %hi(callee)
; M32I-NEXT:    movl r1, %lo(callee)
; M32I-NEXT:    rcall r1, 0
; M32I-NEXT:    ld r14, [sp, 16]
; M32I-NEXT:    addi sp, sp, 20
; M32I-NEXT:    ret
entry:
  %call = call i32 @callee(%struct.Foo* byval @foo)
  ret void
}
