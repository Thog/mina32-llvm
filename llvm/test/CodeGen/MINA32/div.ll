; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=mina32 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=M32I

define i32 @udiv(i32 %a, i32 %b) nounwind {
; M32I-LABEL: udiv:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    div r0, r0, r1
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
  %1 = udiv i32 %a, %b
  ret i32 %1
}

define i32 @udiv_constant(i32 %a) nounwind {
; M32I-LABEL: udiv_constant:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    divi r0, r0, 5
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
  %1 = udiv i32 %a, 5
  ret i32 %1
}

define i32 @udiv_pow2(i32 %a) nounwind {
; M32I-LABEL: udiv_pow2:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    lsr r0, r0, 3
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
  %1 = udiv i32 %a, 8
  ret i32 %1
}

define i64 @udiv64(i64 %a, i64 %b) nounwind {
; M32I-LABEL: udiv64:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -8
; M32I-NEXT:    st r14, [sp, 4]
; M32I-NEXT:    st r4, [sp, 0]
; M32I-NEXT:    addi r14, sp, 8
; M32I-NEXT:    movu r4, %hi(__udivdi3)
; M32I-NEXT:    movl r4, %lo(__udivdi3)
; M32I-NEXT:    rcall r4, 0
; M32I-NEXT:    ld r4, [sp, 0]
; M32I-NEXT:    ld r14, [sp, 4]
; M32I-NEXT:    addi sp, sp, 8
; M32I-NEXT:    ret
  %1 = udiv i64 %a, %b
  ret i64 %1
}

define i64 @udiv64_constant(i64 %a) nounwind {
; M32I-LABEL: udiv64_constant:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -8
; M32I-NEXT:    st r14, [sp, 4]
; M32I-NEXT:    st r4, [sp, 0]
; M32I-NEXT:    addi r14, sp, 8
; M32I-NEXT:    movu r4, %hi(__udivdi3)
; M32I-NEXT:    movl r4, %lo(__udivdi3)
; M32I-NEXT:    movi r2, 5
; M32I-NEXT:    movi r3, 0
; M32I-NEXT:    rcall r4, 0
; M32I-NEXT:    ld r4, [sp, 0]
; M32I-NEXT:    ld r14, [sp, 4]
; M32I-NEXT:    addi sp, sp, 8
; M32I-NEXT:    ret
  %1 = udiv i64 %a, 5
  ret i64 %1
}

define i32 @sdiv(i32 %a, i32 %b) nounwind {
; M32I-LABEL: sdiv:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    movu r2, %hi(__divsi3)
; M32I-NEXT:    movl r2, %lo(__divsi3)
; M32I-NEXT:    rcall r2, 0
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
  %1 = sdiv i32 %a, %b
  ret i32 %1
}

define i32 @sdiv_constant(i32 %a) nounwind {
; M32I-LABEL: sdiv_constant:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    movu r2, %hi(__divsi3)
; M32I-NEXT:    movl r2, %lo(__divsi3)
; M32I-NEXT:    movi r1, 5
; M32I-NEXT:    rcall r2, 0
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
  %1 = sdiv i32 %a, 5
  ret i32 %1
}

define i32 @sdiv_pow2(i32 %a) nounwind {
; M32I-LABEL: sdiv_pow2:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    asr r1, r0, 31
; M32I-NEXT:    lsr r1, r1, 29
; M32I-NEXT:    add r0, r0, r1
; M32I-NEXT:    asr r0, r0, 3
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
  %1 = sdiv i32 %a, 8
  ret i32 %1
}

define i64 @sdiv64(i64 %a, i64 %b) nounwind {
; M32I-LABEL: sdiv64:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -8
; M32I-NEXT:    st r14, [sp, 4]
; M32I-NEXT:    st r4, [sp, 0]
; M32I-NEXT:    addi r14, sp, 8
; M32I-NEXT:    movu r4, %hi(__divdi3)
; M32I-NEXT:    movl r4, %lo(__divdi3)
; M32I-NEXT:    rcall r4, 0
; M32I-NEXT:    ld r4, [sp, 0]
; M32I-NEXT:    ld r14, [sp, 4]
; M32I-NEXT:    addi sp, sp, 8
; M32I-NEXT:    ret
  %1 = sdiv i64 %a, %b
  ret i64 %1
}

define i64 @sdiv64_constant(i64 %a) nounwind {
; M32I-LABEL: sdiv64_constant:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -8
; M32I-NEXT:    st r14, [sp, 4]
; M32I-NEXT:    st r4, [sp, 0]
; M32I-NEXT:    addi r14, sp, 8
; M32I-NEXT:    movu r4, %hi(__divdi3)
; M32I-NEXT:    movl r4, %lo(__divdi3)
; M32I-NEXT:    movi r2, 5
; M32I-NEXT:    movi r3, 0
; M32I-NEXT:    rcall r4, 0
; M32I-NEXT:    ld r4, [sp, 0]
; M32I-NEXT:    ld r14, [sp, 4]
; M32I-NEXT:    addi sp, sp, 8
; M32I-NEXT:    ret
  %1 = sdiv i64 %a, 5
  ret i64 %1
}

define i32 @urem(i32 %a, i32 %b) nounwind {
; M32I-LABEL: urem:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    rem r0, r0, r1
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
  %1 = urem i32 %a, %b
  ret i32 %1
}

define i32 @srem(i32 %a, i32 %b) nounwind {
; M32I-LABEL: srem:
; M32I:       ; %bb.0:
; M32I-NEXT:    addi sp, sp, -4
; M32I-NEXT:    st r14, [sp, 0]
; M32I-NEXT:    addi r14, sp, 4
; M32I-NEXT:    movu r2, %hi(__modsi3)
; M32I-NEXT:    movl r2, %lo(__modsi3)
; M32I-NEXT:    rcall r2, 0
; M32I-NEXT:    ld r14, [sp, 0]
; M32I-NEXT:    addi sp, sp, 4
; M32I-NEXT:    ret
  %1 = srem i32 %a, %b
  ret i32 %1
}
